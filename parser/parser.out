Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PRINT expression
Rule 2     expression -> FUNC
Rule 3     statement -> NAME EQUALS expression
Rule 4     statement -> NAME
Rule 5     expression -> expression PLUS expression
Rule 6     expression -> INT
Rule 7     expression -> NEG expression

Terminals, with rules where they appear

COMMENT              : 
EQUALS               : 3
FUNC                 : 2
INT                  : 6
NAME                 : 3 4
NEG                  : 7
PLUS                 : 5
PRINT                : 1
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 5 5 7
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PRINT expression
    (3) statement -> . NAME EQUALS expression
    (4) statement -> . NAME

    PRINT           shift and go to state 1
    NAME            shift and go to state 2

    statement                      shift and go to state 3

state 1

    (1) statement -> PRINT . expression
    (2) expression -> . FUNC
    (5) expression -> . expression PLUS expression
    (6) expression -> . INT
    (7) expression -> . NEG expression

    FUNC            shift and go to state 6
    INT             shift and go to state 4
    NEG             shift and go to state 5

    expression                     shift and go to state 7

state 2

    (3) statement -> NAME . EQUALS expression
    (4) statement -> NAME .

    EQUALS          shift and go to state 8
    $end            reduce using rule 4 (statement -> NAME .)


state 3

    (0) S' -> statement .



state 4

    (6) expression -> INT .

    PLUS            reduce using rule 6 (expression -> INT .)
    $end            reduce using rule 6 (expression -> INT .)


state 5

    (7) expression -> NEG . expression
    (2) expression -> . FUNC
    (5) expression -> . expression PLUS expression
    (6) expression -> . INT
    (7) expression -> . NEG expression

    FUNC            shift and go to state 6
    INT             shift and go to state 4
    NEG             shift and go to state 5

    expression                     shift and go to state 9

state 6

    (2) expression -> FUNC .

    PLUS            reduce using rule 2 (expression -> FUNC .)
    $end            reduce using rule 2 (expression -> FUNC .)


state 7

    (1) statement -> PRINT expression .
    (5) expression -> expression . PLUS expression

    $end            reduce using rule 1 (statement -> PRINT expression .)
    PLUS            shift and go to state 10


state 8

    (3) statement -> NAME EQUALS . expression
    (2) expression -> . FUNC
    (5) expression -> . expression PLUS expression
    (6) expression -> . INT
    (7) expression -> . NEG expression

    FUNC            shift and go to state 6
    INT             shift and go to state 4
    NEG             shift and go to state 5

    expression                     shift and go to state 11

state 9

    (7) expression -> NEG expression .
    (5) expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    $end            reduce using rule 7 (expression -> NEG expression .)
    PLUS            shift and go to state 10

  ! PLUS            [ reduce using rule 7 (expression -> NEG expression .) ]


state 10

    (5) expression -> expression PLUS . expression
    (2) expression -> . FUNC
    (5) expression -> . expression PLUS expression
    (6) expression -> . INT
    (7) expression -> . NEG expression

    FUNC            shift and go to state 6
    INT             shift and go to state 4
    NEG             shift and go to state 5

    expression                     shift and go to state 12

state 11

    (3) statement -> NAME EQUALS expression .
    (5) expression -> expression . PLUS expression

    $end            reduce using rule 3 (statement -> NAME EQUALS expression .)
    PLUS            shift and go to state 10


state 12

    (5) expression -> expression PLUS expression .
    (5) expression -> expression . PLUS expression

    PLUS            reduce using rule 5 (expression -> expression PLUS expression .)
    $end            reduce using rule 5 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 10 ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
