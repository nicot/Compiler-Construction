#!/bin/bash

SCRIPT_PATH="`dirname $0`"
TESTS_DIR="$SCRIPT_PATH/tests"
SRC_DIR="$SCRIPT_PATH/src"
BUILD_DIR="$SCRIPT_PATH/build"

rm $TESTS_DIR/*.s
rm $BUILD_DIR/*

ISDIR=1

if [ $# != 0 ]; then
    
    if [ -f $1 ]; then 
	ISDIR=0
	FILE=$1
	NOEXT=${FILE%.py}
	NOEXT_BASE=`basename $NOEXT`
	EXE=$BUILD_DIR/`basename $NOEXT`
	
	# Compile each file and run through gcc
	python $SRC_DIR/compile.py $FILE

	# Note: WARNING MESSAGES ARE OFF
	gcc -m32 -w "$NOEXT.s" $SRC_DIR/*.c -lm -o $EXE
	$EXE
	if [ $? != 0 ]; then
		echo "$NOEXT_BASE gcc compile failed!"		
	fi

	#Compare the output of the compiled filed to the
	#output of the python interpreter
	if [[ -e "$NOEXT.in" ]] ; then
	    cat "$NOEXT.in" | $EXE > $EXE.a.out
	    cat "$NOEXT.in" | python $FILE > $EXE.py.out
	else
	     $EXE > $EXE.a.out
	     python $FILE > $EXE.py.out
	fi
	diff $EXE.a.out $EXE.py.out
	if [ $? != 0 ]; then
	    echo "$NOEXT_BASE failed!"		
	else
	    echo "$NOEXT_BASE passed!"	
	fi
    fi
    if [ -n $1 ]; then
	TESTS_DIR="$TESTS_DIR/$1"
    fi
fi


if [ $ISDIR = 1 ]; then
    for FILE in $TESTS_DIR/*.py
    do
	NOEXT=${FILE%.py}
	NOEXT_BASE=`basename $NOEXT`
	EXE=$BUILD_DIR/`basename $NOEXT`
	
	# Compile each file and run through gcc
	python $SRC_DIR/compile.py $FILE

	# Note: WARNING MESSAGES ARE OFF
	gcc -m32 -w "$NOEXT.s" $SRC_DIR/*.c -lm -o $EXE
	if [ $? != 0 ]; then
	    echo "$NOEXT_BASE gcc compile failed!"
	    break
	fi

	#Compare the output of the compiled filed to the
	#output of the python interpreter
	if [[ -e "$NOEXT.in" ]] ; then
	    cat "$NOEXT.in" | $EXE > $EXE.a.out
	    cat "$NOEXT.in" | python $FILE > $EXE.py.out
	else
	    $EXE > $EXE.a.out
	    python $FILE > $EXE.py.out
	fi
	diff $EXE.a.out $EXE.py.out
	if [ $? != 0 ]; then
	    echo "$NOEXT_BASE failed!"
	    break
	fi
	echo "$NOEXT_BASE passed!"
    done
fi
